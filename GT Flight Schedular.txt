
from fastapi import APIRouter, HTTPException,Depends
from pydantic import BaseModel
from app.database.session import get_db

router = APIRouter()

class PromoVerify(BaseModel):
    Code: str
    PromoCode: str

@router.get("/checkout/{code}")
def get_product_basic(code: str, db = Depends(get_db)):
    product = db.execute("SELECT * FROM Product WHERE Code = ?", (code,)).fetchone()
    print(product)
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    return {
        "Name": product[1],
        "Price": product[7],
        "ImageUrl": product[4],
        "MarkUP": product[11],
        "MarkUpType": product[12],
        "MarkUpValidFrom": product[17],
        "MarkUpValidTill": product[18],
        "DiscountValidFrom": product[15],
        "DiscountValidTill": product[16],
    }

@router.post("/checkout/verify")
def verify_promo(data: PromoVerify, db = Depends(get_db)):
    product = db.execute("SELECT * FROM Product WHERE Code = ?", (data.Code,)).fetchone()
    if not product:
        raise HTTPException(status_code=404, detail="Product not found")
    
    if product[8] != data.PromoCode:
        raise HTTPException(status_code=400, detail="Invalid promo code")

    return {
        "Name": product[1],
        "Price": product[7],
        "ImageUrl": product[4],
        "Discount": product[9],
        "DiscountType": product[10],
        "MaxDiscountAmount": product[14],
    }

i this code send markup value as well and in const code = window.location.pathname.split('/').pop();
let productBasePrice = 0;

async function loadProduct() {
  const res = await fetch(`/api/v1/checkout/${code}`); 
  if (!res.ok) {
    alert("Product not found");
    return;
  }
 
  const product = await res.json();
  document.getElementById("productName").innerText = product.Name;
  document.getElementById("price").innerText = product.Price;
  productBasePrice = product.Price;
  document.getElementById("markup").innerText = product.MarkUP ?? "N/A";
  document.getElementById("markupType").innerText = product.MarkUpType ?? "";
  document.getElementById("productImage").src = product.ImageUrl || "";
 
  document.getElementById("markupFrom").innerText = product.MarkUpValidFrom || "N/A";
  document.getElementById("markupTill").innerText = product.MarkUpValidTill || "N/A";
  document.getElementById("discountFrom").innerText = product.DiscountValidFrom || "N/A";
  document.getElementById("discountTill").innerText = product.DiscountValidTill || "N/A";
}

document.getElementById("promoForm").addEventListener("submit", async (e) => {
  e.preventDefault();
  const promoCode = document.getElementById("promoInput").value;

  const res = await fetch("/api/v1/checkout/verify", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ Code: code, PromoCode: promoCode })
  });

  if (res.ok) {
    const data = await res.json();
    document.getElementById("discount").innerText = data.Discount;
    document.getElementById("discountType").innerText = data.DiscountType;
    document.getElementById("maxDiscount").innerText = data.MaxDiscountAmount ?? "N/A";
    document.getElementById("discountSection").classList.remove("hidden");
    document.getElementById("promoError").innerText = "";


    let discountAmt = 0;
    if (data.DiscountType === "Percentage") {
      discountAmt = (productBasePrice * data.Discount) / 100;
    } else if (data.DiscountType === "FixedAmount") {
      discountAmt = data.Discount;
    }

    if (data.MaxDiscountAmount !== null && discountAmt > data.MaxDiscountAmount) {
      discountAmt = data.MaxDiscountAmount;
    }

    

    const finalPrice = productBasePrice - discountAmt;
    document.getElementById("finalPrice").innerText = Math.round(finalPrice);
  } else {
    document.getElementById("promoError").innerText = "Invalid Promo Code";
  }
});

loadProduct(); in this javascript file get markup also in html one but should aslo be for quantity if quantity is greater tan the markupquantity no cmiision else markup amount shoul be added to original price and then do your calc
