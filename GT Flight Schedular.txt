<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Product List</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <div class="container">
        <h1>Products</h1>
        <table id="productTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Code</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Available</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="productBody">
                <!-- Populated via JS -->
            </tbody>
        </table>

        <h2>Add New Product</h2>
        <form id="addProductForm">
            <!-- Fields (you can add more if needed) -->
            <input type="text" name="Name" placeholder="Name" required>
            <input type="text" name="Code" placeholder="Code" required>
            <input type="text" name="Category" placeholder="Category" required>
            <input type="url" name="ImageUrl" placeholder="Image URL" required>
            <input type="number" name="Price" placeholder="Price" required>
            <input type="text" name="AvailableCountryCodes" placeholder="Country Codes" required>
            <button type="submit">Add Product</button>
        </form>
    </div>
    <script src="/static/script.js"></script>
</body>
</html>


body {
    font-family: Arial, sans-serif;
    padding: 20px;
    background: #f5f5f5;
}

.container {
    background: white;
    padding: 20px;
    border-radius: 8px;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 30px;
}

th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

button {
    padding: 6px 12px;
    margin: 2px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button.edit {
    background-color: #2196F3;
    color: white;
}

button.order {
    background-color: #4CAF50;
    color: white;
}

form input {
    margin: 5px;
    padding: 8px;
    width: 200px;
}


document.addEventListener("DOMContentLoaded", async () => {
    const tbody = document.getElementById("productBody");
    const addForm = document.getElementById("addProductForm");

    async function fetchProducts() {
        const res = await fetch("/api/v1/products");
        const products = await res.json();

        tbody.innerHTML = "";
        products.forEach(product => {
            const row = document.createElement("tr");

            row.innerHTML = `
                <td>${product.Name}</td>
                <td>${product.Code}</td>
                <td>${product.Category}</td>
                <td>${product.Price}</td>
                <td>${product.IsAvailable ? "Yes" : "No"}</td>
                <td>
                    <button class="edit" onclick="editProduct('${product.Code}')">Edit</button>
                    <button class="order" onclick="orderProduct('${product.Code}')">Order</button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    window.editProduct = async function(code) {
        const newPrice = prompt("Enter new price:");
        if (!newPrice) return;

        const res = await fetch("/api/v1/update_product", {
            method: "POST",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                Code: code,
                Price: parseInt(newPrice)
            })
        });

        if (res.ok) fetchProducts();
        else alert("Failed to update product");
    };

    window.orderProduct = function(code) {
        window.location.href = `/checkout/${code}`;
    };

    addForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(addForm);
        const product = Object.fromEntries(formData.entries());

        product.Price = parseInt(product.Price);
        product.IsAvailable = true;

        const res = await fetch("/api/v1/add_product", {
            method: "POST",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(product)
        });

        if (res.ok) {
            addForm.reset();
            fetchProducts();
        } else {
            alert("Failed to add product");
        }
    });

    fetchProducts();
});




from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import Optional, List

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")

class AddProduct(BaseModel):
    Name: str
    Code: str
    Category: str
    ImageUrl: str
    IsAvailable: bool
    Description: Optional[str] = ""
    Price: int
    PromoCode: Optional[str] = None
    Discount: Optional[int] = None
    DiscountType: str = "percentage"
    MarkUP: Optional[int] = None
    MarkUpType: str = "percentage"
    MaxQuantityForMarkUP: Optional[int] = None
    MaxDiscountAmount: Optional[int] = None
    DiscountValidFrom: Optional[str] = None
    DiscountValidTill: Optional[str] = None
    MarkUpValidFrom: Optional[str] = None
    MarkUpValidTill: Optional[str] = None
    AvailableCountryCodes: str

products_db: List[AddProduct] = []

@app.get("/", response_class=HTMLResponse)
async def home():
    with open("product_list.html", "r") as f:
        return HTMLResponse(content=f.read())

@app.get("/api/v1/products")
async def get_products():
    return products_db

@app.post("/api/v1/add_product")
async def add_product(product: AddProduct):
    products_db.append(product)
    return {"message": "Product added successfully"}

@app.post("/api/v1/update_product")
async def update_product(update: dict):
    code = update.get("Code")
    for product in products_db:
        if product.Code == code:
            for k, v in update.items():
                setattr(product, k, v)
            return {"message": "Product updated"}
    return {"error": "Product not found"}
